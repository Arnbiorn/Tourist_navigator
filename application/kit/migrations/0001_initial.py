# Generated by Django 2.2.6 on 2020-03-19 14:50

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import kit.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='StudentGroup',
            fields=[
                ('id', models.AutoField(auto_created=True,primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True,primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True,max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True,max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True,max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False,help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('role', models.CharField(default='student', max_length=15, verbose_name='Роль')),
                ('tel', models.CharField(blank=True,max_length=15, verbose_name='Телефон')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('id', models.AutoField(auto_created=True,primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512)),
                ('description', models.TextField(max_length=8192)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT,related_name='courses', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Database',
            fields=[
                ('id', models.AutoField(auto_created=True,primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512)),
                ('description', models.TextField(max_length=8192)),
                ('source_code', models.TextField(blank=True, max_length=65535, null=True)),
                ('source_file', models.FileField(blank=True,null=True, upload_to=kit.models.database_src_path)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT,related_name='databases', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='IncludedTask',
            fields=[
                ('id', models.AutoField(auto_created=True,primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='SetOfTask',
            fields=[
                ('id', models.AutoField(auto_created=True,primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512)),
                ('status', models.CharField(max_length=100)),
                ('owner', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT,related_name='set_of_tasks', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True,primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512)),
                ('task_text', models.TextField(max_length=4096)),
                ('reference_solution', models.TextField(max_length=8192)),
                ('difficulty', models.IntegerField(choices=[(1, 'Очень просто'), (2, 'Легко'), (
                    3, 'Средний уровень'), (4, 'Трудно'), (5, 'Очень сложно')], default=3)),
                ('banned_words', models.TextField(max_length=2048, null=True)),
                ('required_words', models.TextField(max_length=2048, null=True)),
                ('number_of_attempts', models.IntegerField(default=10)),
                ('should_check_runtime', models.BooleanField(default=False)),
                ('allowed_time_error', models.FloatField(default=0.0)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT,
                                            related_name='tasks', to=settings.AUTH_USER_MODEL)),
                ('sandbox_db', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, related_name='tasks', to='kit.Database')),
            ],
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=512)),
                ('description', models.TextField(max_length=8192)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT,
                                            related_name='themes', to=settings.AUTH_USER_MODEL)),
                ('sets_of_task', models.ManyToManyField(
                    null=True, to='kit.SetOfTask')),
            ],
        ),
        migrations.CreateModel(
            name='UserCourse',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('date_start', models.DateTimeField(auto_now_add=True)),
                ('date_finish', models.DateTimeField(null=True)),
                ('access_course', models.CharField(max_length=100)),
                ('account', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('course', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='kit.Course')),
            ],
        ),
        migrations.CreateModel(
            name='UserPriorityTheme',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.FloatField()),
                ('theme', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='kit.Theme')),
                ('user_course', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='kit.UserCourse')),
            ],
        ),
        migrations.CreateModel(
            name='UserMasteringTheme',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('degree_of_mastering', models.FloatField()),
                ('theme', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='kit.Theme')),
                ('user_course', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, to='kit.UserCourse')),
            ],
        ),
        migrations.CreateModel(
            name='TaskInTheme',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('affilation', models.FloatField()),
                ('task', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.PROTECT, related_name='themes', to='kit.Task')),
                ('theme', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.PROTECT, related_name='tasks', to='kit.Theme')),
            ],
        ),
        migrations.AddField(
            model_name='setoftask',
            name='tasks',
            field=models.ManyToManyField(
                default=1, through='kit.IncludedTask', to='kit.Task'),
        ),
        migrations.CreateModel(
            name='IndividualRouteStep',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=100, null=True)),
                ('solution', models.TextField(max_length=8192, null=True)),
                ('next_step', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.PROTECT, to='kit.IndividualRouteStep')),
                ('task_in_set', models.ForeignKey(default=1, null=True,
                                                  on_delete=django.db.models.deletion.PROTECT, to='kit.IncludedTask')),
                ('user_course', models.ForeignKey(
                    null=True, on_delete=django.db.models.deletion.PROTECT, to='kit.UserCourse')),
            ],
        ),
        migrations.AddField(
            model_name='includedtask',
            name='setoftask',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='kit.SetOfTask'),
        ),
        migrations.AddField(
            model_name='includedtask',
            name='task',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, to='kit.Task'),
        ),
        migrations.CreateModel(
            name='DatabaseImage',
            fields=[
                ('id', models.AutoField(auto_created=True,
                                        primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(blank=True, null=True,
                                            upload_to=kit.models.database_media_path)),
                ('database', models.ForeignKey(
                    on_delete=django.db.models.deletion.PROTECT, related_name='images', to='kit.Database')),
            ],
        ),
        migrations.AddField(
            model_name='course',
            name='themes',
            field=models.ManyToManyField(to='kit.Theme'),
        ),
        migrations.AddField(
            model_name='user',
            name='group_number',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.PROTECT,
                                    related_name='included_in_group', to='kit.StudentGroup'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                         related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set',
                                         related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
